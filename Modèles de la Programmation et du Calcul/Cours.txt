Adrian Tamasa - atanasa@u-bordeaux.fr
Labri, bat A30, bureau 303
Cours: https://www.labri.fr/perso/atanasa/MPC

Etude de fondements logiques et mathématiques de l'informatique
    Théorie d'automates
    Logique mathématique, combinatoire

Notions clés:
    Automates finis
    Expressions rationnelles
    Grammaires algébriques
    Automate à pile
    Eléments de combinatoire

Plan:
    I   - Langages formels, mots
    II  - Expressions rationnelles
    III - Automates finis
    IV  - Grammaires algébriques
    V   - Automates à piles
    VI  - Quelques éléments introductifs de combinatoires



MOTS ET LANGAGES FORMELS

- Motivation pour l'étude des mots et langages

Toute donnée informatique est (codée par) un mot
Exemples du codage par les mots:
    Programme en C, texte
    Graphe

Mot = Suite de lettres
Langage formel = Ensemble de mots
Objectif: Comprendre, définir, manipuler et transformer les langages
L'alphabet est un ensemble fini

Exemple: A alphabet, A = { 0, 1 }
Exemple de mots sur A: 01, 001101, Ɛ
Mot vide = Ɛ

A* = L'ensemble de mots formés sur l'alphabet A
A* est un monoïde libre
Le triplet (E, ., Ɛ) est un monoïde logique:
    - u.v∈E
    - u.(v.w) = (u.v).w ∀u,v,w∈E
    - u.Ɛ = Ɛ.u = u
Une partie P d'un monoïde est appelée base [A COMPLETER]
Un monoïde est libre s'il admet une base

Le langage vide Ø est le langage qui ne contient aucun mot
Il ne faut pas confondre le langage vide Ø avec le langage { Ɛ }

Longueur d'un mot = Nombre de lettres
Ex: |Ɛ| = 0, |010| = 3

Concaténation de mots: consiste à coller deux mots (u.v)
Ex: (aba).(bab) = ababab, Ɛ.(ab) = ab = (ab).Ɛ
Le mot vide est l'élément neutre de l'opération de concaténation



EXPRESSIONS RATIONNELLES (REGULIERES)

Une classe de langages a été définie par Stephen C. Kleene (1909-1994)
Les langages rationnels (réguliers) sont définis en utilisant les expressions rationnelles (régulières)

Les expressions rationnelles (régulières) sont formelles à partir du mot vide et des lettres en utilisant 3 opérations rationnelles:
    L'union: L1 ∪ L2 := { U | u∈L1 ou u∈L2 } := L1+L2
        Ex: { a, ab } ∪ { aa } = { a, ab, aa }
    Le produit (la concaténation): L1.L2 = { u1, u2 | u1∈L1, u2∈L2 }
        Ex: { a, ab } . { a } = { aa, aba } & { a, ab } . { a } != { a, ab, a }
    L'étoile: L* := U(i>=0)Li = L0 ∪ L1 ∪ L2 ∪... où L0 = { Ɛ }, L1 = L, L2 = L.L, L3 = L2.L, ..., Ln = Ln-1.L

Les expressions rationnelles sont construites à partir de lettres, le mot vide Ɛ et l'expression vide Ø en utilisant l'union (+), le produit (.) et l'étoile (*).

L(e) = Langage défini par l'expression e
Ex: L(a) = { a }, L(Ɛ) = { Ɛ }, L(Ø) = { Ø }

On a:
    L(e1 + e2) = L(e1) + L(e2)
    L(e1 . e2) = L(e1) . L(e2)
    L(e*)      = (L(e))*

Exemples d'expressions rationnelles:
    Ensemble de mots sur { a, b } qui commencent par la lettre a: a . (a + b)*; a . (a* . b*)*
    Ensemble de mots sur { a, b } qui contiennent le facteur "aba": (a + b)* aba (a + b)*
    Ensemble des entiers divisibles par 2 en base 2 (l'alphabet est { 0, 1 }): (0 + 1)* 0
    Ensemble des entiers divisibles par 5, en base 10 (l'alphabet est { 0, 1, 2..., 9 }): (0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9)* (0 + 5)
    Ensemble de tous les mots sur A sauf le mot vide Ɛ: A* \ { Ɛ } = A . A* = A* . A

e+ := e . e* = e* . e = e . (Ɛ + e + e² + ...) = e + e² + e³ + ...
e* := Ɛ + e+
Au niveau des langages, avec L langage rationnel
    L+ = L ∪ L² ∪ L³ ∪...
    L* = { Ɛ } ∪ L ∪ L² ∪...
    Donc L* = { Ɛ } ∪ L+



AUTOMATES FINIS

Un automate fini (AF) est une machine abstraite très simple qui permet de définir des langages.
Un AF est une machine qui prend en entrée des mots et émet un "verdict", chaque mot est accepté ou rejeté par l'AF
Intérêt par rapport aux expressions: l'AF est un graphe (on a beaucoup d'algorithmes sur les graphes!)

Un automate fini est un quintuplet (A, Q, 𝛿, I, F)
    A - L'alphabet de travail
    Q - L'ensemble d'états
    𝛿 - L'ensemble de transitions, 𝛿 ⊆ Q x A x Q
    I - L'ensemble d'états initiaux, I ⊆ Q
    F - L'ensemble d'états finaux/acceptants, F ⊆ Q

Une transition peut se représenter de plusieurs façons:
    - Triplet (Ex: (1, a, 2) avec 1, 2∈Q et a∈A)
    - Couple  (Ex: ((1, a), 2))
    - Flèche orientée (1 --a-> 2)

M = { A = { a, b }, Q = { 1, 2, 3 }, I = { 1 }, F = { 2 } }
                  `
                 /
---> 1 ---a--> 2 -\
      `       /  \b
      a,b    /
        \   b
         \ ,
          3

𝛿 = { (1, a, 2), (2, b, 2), (2, b, 3), (3, a, 1), (3, b, 1) }
Un AF peut se représenter de façon canonique sans la forme d'un graphe orienté étiqueté


Mots et langages acceptés par un AF

Un calcul (ou un run) d'un AF sur un mot a1a2...au (où a1...au ∈ A) est un chemin formé de transitions consécutives qui part d'un état initial de l'AF
    1 --a-> 2                 calcul sur le mot "a"
    1 --a-> 2 --b-> 2 --b-> 2 calcul sur le mot "abb"
    1 ou 1 --Ɛ-> 1            calcul sur le mot Ɛ
Un calcul acceptant est un calcul qui termine dans un état final
Un mot accepté (reconnu) par un AF est un mot pour lequel il existe au moins un calcul acceptant sur ce mot
    Le mot "abb" est un mot accepté (reconnu) par l'AF M
    Le mot "aa" n'est pas un mot accepté par l'AF M


Automates et matrices d'adjacences de graphes

On peut associer de façon canonique à un automate la matrice d'adjacence du graphe respectif.
Mots de longueur k reconnus par l'AF
    Si on part d'un état i∈Q et on arrive dans un état j∈Q, M^k(ij)

Le langage accepté/reconnu par un automate H est l'ensemble des mots acceptés par l'automate H
    Notation: L(H) est le langage accepté par l'automate H
        L(M) = a(b + b(a + b)a)*
        Remarque: Il existe des algorithmes qui permettent d'exprimer à l'aide d'une expressions rationnelle le langage accepté par un AF


Construction d'automates

Exercice: Construire un AF qui permet de reconnaître les langages suivants sur l'alphabet A = { a, b }
1) L'ensemble des mots commençant par "a"
2) L'ensemble des mots contenant "aba"
3) L'ensemble des mots qui contient un nombre pair de "a"
4) L'ensemble des mots qui ne contient ni "aa" ni "bb"

1) M1 = { A = { a, b }, Q = { 1, 2 }, I = { 1 }, F = { 2 } }
   𝛿 = { (1, a, 2), (2, (a,b), 2) }
2) M2 = { A = { a, b }, Q = { 1, 2, 3, 4 }, I = { 1 }, F = { 4 } }
   𝛿 = { (1, (a,b), 1), (1, a, 2), (2, b, 3), (3, a, 4), (4, (a,b), 4) }
3) M3 = { A = { a, b }, Q = { 1, 2 }, I = { 1 }, F = { 1 } }
   𝛿 = { (1, a, 2), (1, b, 1), (2, b, 2), (2, a, 1) }
4) M4 = { A = { a, b }, Q = { 1, 2 }, I = { 1, 2 }, F = { 1, 2 } }
   𝛿 = { (1, a, 2), (2, b, 1) }

Automate sur l'alphabet à 10 lettres A = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 } qui reconnaît les nombres divisibles par 5
M4 = { A = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }, Q = { 1, 2 }, I = { 1 }, F = { 2 } }
𝛿 = { (1, (0,1,2,3,4,5,6,7,8,9), 1), (1, (0,5), 2) }



AUTOMATE COMPLET

Définition: Un AF H = (A, Q, I, F, 𝛿) est un automate complet si pour chaque état q∈Q et pour chaque lettre a∈A, il existe au moins une transition étiquetée par a sortant de l'état q


Construction d'un automate complet (le complété)

Théorème: Si H = (A, Q, I, F, 𝛿) et soit J = (A, Q ∪ { q1 }, I, F, 𝛿') où:
    q1 est un nouveau état (état puit?)
    Les transitions de J sont données par 𝛿' = 𝛿 ∪ { (p, α, q1) } p∈Q, α∈A et il n'y a pas de transition de la forme (p, α, q) dans H [A completer...?]
L'AF J est un automate complet et L(H) = L(J)
J est le complété de H

Preuve: Immédiate, car les transitions rajoutées ne modifient pas les chemins associés aux mots reconnus



AUTOMATES DETERMINISTES

Définition: L'automate H = (A, Q, I, F, 𝛿) est un AF déterministe (ou AFD) si:
    |I| = 1 (il existe un seul état initial)
    Pour tout p∈Q et toute α∈A, il existe au plus une transition étiquetée α qui soit de l'état p.


Le complémentaire

Définition: Le complémentaire (ou le complément) d'un ensemble de mots L ⊆ A* est l'ensemble A* \ L (l'ensemble de mots qui ne sont pas dans L)

Théorème: Soit H = (A, Q, I, F, 𝛿) un automate complet et déterministe. Soit J = (A, Q, I, Q \ F, 𝛿) (J est obtenu à partir de H en rendant finaux les états non-finaux de H)
Alors, L(J) = A* \ L(H)

Exemple: H = { A = { a }, Q = { 1, 2 }, I = { 1 }, F = { 2 }, 𝛿 = { (1, a, 2), (2, a, 2) } } - L(H) = aa* = a+
         J = { A = { a }, Q = { 1, 2 }, I = { 1 }, F = { 1 }, 𝛿 = { (1, a, 2), (2, a, 2) } } - L(J) = { Ɛ } = A* \ L(H)

Remarque: Si A n'est pas complet et déterministe, le théorème n'est pas vrai

Exemples:
    Automate complet mais pas déterministe:
        H = { A = { a, b }, Q = { 1, 2 }, I = { 1 }, F = { 2 }, 𝛿 = { (1, (a,b), 1), (1, a, 2), (2, (a,b), 2) } } - L(H) = (a + b)* a (a + b*)
        J = { A = { a, b }, Q = { 1, 2 }, I = { 1 }, F = { 1 }, 𝛿 = { (1, (a,b), 1), (1, a, 2), (2, (a,b), 2) } } - L(J) = (a + b)* = A* ≠ A* \ L(H)
    Automate déterministe mais pas complet:
        H = { A = { a }, Q = { 1, 2 }, I = { 1 }, F = { 2 }, 𝛿 = { (1, a, 2) } - L(H) = a
        J = { A = { a }, Q = { 1, 2 }, I = { 1 }, F = { 1 }, 𝛿 = { (1, a, 2) } - L(J) = { Ɛ } ≠ A* \ L(H)

Remarque: Il ne faut pas confondre complémenter et compléter



DETERMINISATION DES AUTOMATES

Objectif: A partir d'un AF non-déterministe H, construire un automate déterministe J tel que L(A) = L(B)


Résultat préliminaire - ensemble de sous-ensembles

Soit Q un ensemble fini, |Q| = n. On note 2^Q l'ensemble de sous-ensembles de Q. Alors |2^Q| = 2^n
Q = { q1, q2,... qn }  2^Q = { ∅, { q1 }, { q2 }, ..., { qn }, { q1, q2 }, { q1, q3 }, ..., { qn-1, qn }, ..., { q1, q2, ..., qn } }
Si n = 3, 2^Q = { ∅, { q1 }, { q2 }, { q3 }, { q1, q2 }, { q1, q3 }, { q2, q3 }, { q1, q2, q3 } }
|2^Q| = 2^3 = 8

Preuve: |2^Q| = (n 0) + (n 1) + ... (n n) = 2^n où (n k) = (n!) / (k!(n-k)!)


La méthode de sous-ensembles

Théorème: Soit H = (A, Q, I, F, 𝛿) un AF non-déterministe
On construit l'automate pour lequel:
    l'ensemble d'états est 2^Q
    l'état initial est { I }
    un état P∈2^Q est final si et seulement si P ∩ F ≠ ∅
    la fonction de transition est donnée par 𝛿J(P, a) = U(p∈P) 𝛿(p, a), ∀P∈2^Q, a∈A
Théorème: L'AF construit ainsi est un AFD qui reconnait le même langage que A

Exemple: H = { A = { a, b }, Q = { p, q, r }, I = { p }, F = { r }, 𝛿 = { (p, (a,b), p), (p, a, q), (q, b, r), (r, (a,b), r) } }
    Q = { p, q, r }
    Les sous-ensembles de Q QJ = { ∅, { p }, { q }, { r }, { p, q }, { p, r }, { q, r }, { p, q, r } }
    IJ = { p }
    FJ = { { r }, { p, r }, { q, r }, { p, q, r } }
    𝛿J({ p }, a) = 𝛿H(p, a) = { p, q }
    𝛿J({ p }, b) = 𝛿H(p, b) = { p }
    𝛿J({ q }, a) = 𝛿H(q, a) = ∅
    𝛿J({ q }, b) = 𝛿H(q, b) = { r }
    𝛿J({ r }, a) = 𝛿H(r, a) = { r }
    𝛿J({ r }, b) = 𝛿H(r, b) = { r }
    𝛿J({ p, q }, a) = 𝛿H(p, a) U 𝛿H(q, a) = { p, q } U ∅    = { p, q }
    𝛿J({ p, q }, b) = 𝛿H(p, b) U 𝛿H(q, b) = { p } U { r }    = { p, r }
    𝛿J({ q, r }, a) = 𝛿H(q, a) U 𝛿H(r, a) = ∅ U { r }       = { r }
    𝛿J({ q, r }, b) = 𝛿H(q, b) U 𝛿H(r, b) = { r } U { r }    = { r }
    𝛿J({ p, r }, a) = 𝛿H(p, a) U 𝛿H(r, a) = { p, q } U { r } = { p, q, r }
    𝛿J({ p, r }, b) = 𝛿H(p, b) U 𝛿H(r, b) = { p } U { r }    = { p, r }
    𝛿J({ p, q, r }, a) = 𝛿H(p, a) U 𝛿H(q, a) U 𝛿H(r, a) = { p, q } U ∅ U { r } = { p, q, r }
    𝛿J({ p, q, r }, b) = 𝛿H(p, b) U 𝛿H(q, b) U 𝛿H(r, b) = { p } U { r } U { r } = { p, r }
    [VOIR SCHEMA]

Preuve: L'AF J est déterministe et complet par construction.
    Ré-écriture de transitions dans J
    P, R⊂Q, a∈A on a P--a->R lorsque R = { q∈Q | ∃p∈P, (p, a, q)∈𝛿H }

Lemme: Pour tout mot w et pour tout état r∈Q, il existe un chemin q--w->r dans H avec q∈I
    si et seulement s'il existe un chemin I--w->R dans J, avec r∈R
    L(H) = L(J) <=> L(H)⊆L(J) et L(J)⊆L(H) (tout mot de L(H) est tout mot de L(J))
    Soit w∈L(H), il existe un chemin acceptant dans H sur w, c'est à dire ∃q∈I et r∈F tel que q--w->r dans H

D'après le lemme, il existe un chemin I--w->R dans J, avec r∈R mais r∈F => R∩F≠∅ => R état final de J
    => I--w->R est un chemin acceptant
    => w∈L(J), ∀w
    => L(H)⊆L(J)
    => L(J)⊆L(H)

Soit w∈L(J)
    => Il existe un chemin acceptant dans J sur w
    C'est à dire ∃ I--w->R dans J, R état final
        => ∃r∈F tel que r∈R (car R∩F≠∅)

D'après le lemme, il existe un calcul q--w->r dans H, avec q∈I
    => w∈L(H), ∀w
    => L(J)⊆L(H)
    => L(H) = L(J)


Propriétés de clotures des AF

Définition: Un langage reconnaissable est un langage pour lequel il existe un AF qui reconnaît ce langage

Théorème: Soit A un alphabet
    - Si L ⊆ A* est un langage reconnaissable alors son complémentaire A*\L est aussi reconnaissable
    - Si L1 et L2 sont des langages reconnaissables, alors les langages L1∪L2 et L1∩L2 sont aussi reconnaissables

Soit Hi = (A, Qi, Ii, Fi, 𝛿i) avec i = 1,2, Q = Q1 x Q2, I = I1 x I2,
F∪ = { (q1, q2)∈Q | q1∈F1 ou q2∈F2 }
F∩ = { (q1, q2)∈Q | q1∈F1 et q2∈F2 } = F1 x F2
𝛿 = { ((p1, p2), a, (q1, q2))∈Q x A x Q | (pi, a, qi)∈𝛿i, i = 1,2 }

Théorème - Produit cartésien d'AF
    - L'AF H∩ = (A, Q, I, F∩, 𝛿) reconnait l'intersection des langages reconnus par H1 et H2
    - Si H1 et H2 sont complets, l'AF H∪ = (A, Q, I, F∪, 𝛿) reconnait l'union des langages reconnus par H1 et H2

Preuve:
    1) L(H1)∩L(H2) = L(H∩) <=> L(H1)∩L(H2) ⊆ L(H∩) et L(H∩) ⊆ L(H1)∩L(H2)
        1) L(H1)∩L(H2) ⊆ L(H∩)
            Soit w = a1a2...an∈L(H1)∩L(H2)
            => ∃p0--a1->p1--a2->...--an->pn calcul acceptant dans H1
               ∃q0--a1->q1--a2->...--an->qn calcul acceptant dans H2
            => (p0, q0)--a1->(p1, q1)--a2->...--an->(pn, qn) calcul dans H∩
               p0∈I1, q0∈I2 => (p0, q0)∈I
               pn∈F1, qn∈F2 => (pn, qn)∈F∩
            => w∈L(A∩) => L(H1)∩L(H2) ⊆ L(H∩)
        2) L(H∩) ⊆ L(H1)∩L(H2)
            Soit w = a1a2...an∈L(H∩)
            => ∃(p0, q0)--a1->(p1, q1)--a2->...--an->(pn, qn) calcul acceptant dans H∩
            => (p0, q0)∈I  => p0∈I1, q0∈I2
               (pn, qn)∈F∩ => pn∈F1, qn∈F2
               p0--a1->p1--a2->...--an->pn calcul dans H1
               q0--a1->q1--a2->...--an->qn calcul dans H2
            => w∈L(H1)∩L(H2) => L(H∩) ⊆ L(H1)∩L(H2)
        => L(H1)∩L(H2) = L(H∩)
    2) L(H1)∪L(H2) = L(A∪) <=> L(H1)∪L(H2) ⊆ L(H∪) et L(H∪) ⊆ L(H1)∪L(H2)
        1) L(H1)∪L(H2) ⊆ L(H∪)
            Soit w = a1a2...an∈L(H1)∪L(H2) => w reconnu par H1, soit par H2
            On suppose (sans perte de généralité) que w∈L(H1)
            => ∃p0--a1->p1--a2->...--an->pn calcul acceptant dans H1
               p0∈I1, pn∈F1
            H2 est complet: ∃q0--a1->q1--a2->...--an->qn calcul dans H2 avec q0∈I2
            => (p0, q0)--a1->(p1, q1)--a2->...--an->(pn, qn) calcul dans H∪
            (p0, q0)∈I, (pn, qn)∈F∪
            => w∈L(H∪) => L(H1)∪L(H2) ⊆ L(H∪)
        2) Identique au cas 1.2

Exemple de produit cartésien d'AF (VOIR FIG. 1)
    H1: { A = { a, b }, Q = { q1, q2, q3 }, I = { q1 }, F = { q3 }, 𝛿 = { (q1, (a,b), q1), (q1, b, q2), (q2, a, q3), (q3, (a,b), q3) } }
    H2: { A = { a, b }, Q = { q4, q5, q6 }, I = { q4 }, F = { q6 }, 𝛿 = { (q4, (a,b), q4), (q4, a, q5), (q5, b, q6), (q6, (a,b), q6) } }

    Trouver le produit cartésien de H1 et H2, afin d'avoir un AF qui reconnait L(H1)∩L(H2)

    H∩ = {
        A = { a, b }, I = { (q1, q4) }, F∩ = { (q3, q6) },
        Q = { (q1, q4), (q1, q5), (q1, q6), (q2, q4), (q2, q5), (q2, q6), (q3, q4), (q3, q5), (q3, q6) },
        𝛿 = {
            ((q1, q4), (a,b), (q1, q4)), // 14 -> 14
            ((q1, q6), (a,b), (q1, q6)), // 16 -> 16
            ((q3, q4), (a,b), (q3, q4)), // 34 -> 34
            ((q3, q6), (a,b), (q3, q6)), // 36 -> 36

            ((q1, q4), a,     (q1, q5)), // 14 -> 15
            ((q1, q5), b,     (q1, q6)), // 15 -> 16
            ((q1, q5), b,     (q2, q6)), // 15 -> 26
            ((q1, q6), b,     (q2, q6)), // 16 -> 26
            ((q2, q6), a,     (q3, q6)), // 26 -> 36

            ((q1, q4), b,     (q2, q4)), // 14 -> 24
            ((q2, q4), a,     (q3, q4)), // 24 -> 34
            ((q2, q4), a,     (q3, q5)), // 24 -> 35
            ((q3, q4), a,     (q3, q5)), // 34 -> 35
            ((q3, q5), b,     (q3, q6))  // 35 -> 36
        }
    }

AF avec Ɛ-transitions
    Identiques aux AF, mais il peut aussi y avoir des transitions sur le mot vide Ɛ

Exemple
    H = { A = { a, b }, Q = { 1, 2, 3, 4, 5, 6, 7, 8, 9 }, I = { 1 }, F = { 9 }, 𝛿 = { (1, Ɛ, 2), (1, Ɛ, 8), (2, Ɛ, 3), (2, Ɛ, 5), (3, a, 4), (4, Ɛ, 7), (5, b, 6), (6, Ɛ, 7), (7, Ɛ, 2), (7, Ɛ, 8), (8, a, 9) } }
    L(H) - L'ensemble des mots finissant par "a"

Théorème de Kleene
    On peut convertir d'une manière algorithmique une expression rationnelle en AF qui reconnait le même langage
    Vice-versa, on peut convertir de manière algorithmique un AF en expression rationnelle qui décrit le langage reconnu par l'AF



EXPRESSIONS -> AUTOMATES
Intérêt : on peut manipuler les AF par des algorithmes de graphes.


==> Algorithme de Thompson <==
On peut construire pour chaque expression rationnelle un AF avec Ɛ-transition qui reconnaît le même langage que l'expression 

-> Propriétés <-
l'AF construit par l'algo de Thompson :
- A un unique état initial sur lequel n'arrive aucune transition
- A un unique état final duquel ne part aucune transition

-> Algo récursif <-
En supposant qu'on sait faire des automates qui reconnaissent les expressions e1 et e2, on en fait pour e1.e2, e1+e2 et e1*
Algorithme de Thompson pour les langages rationnels "de base" :
i) Ø :         ->(1)     (2)->       langage reconnu : Ø 
ii) {Ɛ} :      ->(1)--Ɛ->(2)->       langage reconnu : {Ɛ} 
iii) {a} :       ->(1)--a->(2)->       langage reconnu : {a} 

=> A) L'Union
On a A1 et A2 des AF tq L(A1) = e1 et L(A2) = e2  =>  L(A) = e1+e2
A:

        __________A1___________
      /                         \
        (i1) - - - - - - - (f1)
        /                    \
       Ɛ                      Ɛ
      /                        \
--->(i)                        (f)--->
      \                        /
       Ɛ                      Ɛ
        \                    /   \
        (i2) - - - - - - - (f2)   | A2
                                 /

=> B) Le produit
On a A1 et A2 des AF tq L(A1) = e1 et L(A2) = e2  =>  L(A) = e1.e2
A:
      ______A1______         ______A2_____
--->(i1) - - - - (f1)--Ɛ-->(i2) - - - - (f2)---->
 


=> C) L'étoile (de la mort lol)
On a A1 un AF tq L(A1) = e1  =>  L(A) = e1*
A:
      _________>____Ɛ_____>__________
     /                               \
--->(i)---Ɛ-->(i1) - - - - (f1)---Ɛ-->(f)--->
                \____<__Ɛ__/


-> Remarques <-
- Les Ɛ-transitions peuvent ensuite être enlevée pour avoir des AF sans Ɛ-transition qui reconnaissent les mêmes langages
- Les Ɛ-transitions ne sont pas initiales à ce stade, identifier les états initiaux et finaux sans précautions peut mener à des AF qui ne reconnaissent pas le langage recherché.

-> Principal inconvénient de l'algo de Thompson <-
Il introduit beaucoup d'Ɛ-transitions

==> Algorithme de Glushkov <==
Conversion des expressions rationnelles en AF sans Ɛ-transition.
Input : une expression rationnelle

I) On commence par renommer les lettres de l'expressions afin d'avoir des noms uniques : linéarisation.
    ex: a(ab+b*)*b  ->  a1(a2b1+b2*)*b3
II) Chaque état de l'AF correspondra à une nouvelle lettre.
III) On rajoute un état supplémentaire, l'état Ɛ (ou 0), qui sera le seul état initial de l'AF.
IV) Les transitions depuis l'état Ɛ vont aller vers les états ai dont les lettres peuvent commencer un mot du langage. (Ɛ)-->(ai)
V) Il existe une transition de l'état ai vers bj (ai)--->(bj) si il existe un mot du langage qui contient le facteur "aibj".
VI) Les transitions allant à un état quelconque sont étiquetées par la lettre de l'état respectif.
VII) Les états finaux sont les états étiquetés par les lettres qui peuvent terminer un mot du langage.




AUTOMATES -> EXPRESSIONS

Il existe plusieurs algorithmes pour convertir un AF en expression:
    Algorithmes de Brzozowski
    Lemme d'Arden
    etc

Lemme d'Arden
    Dean N Arden, 1961
    Il permet de résoudre des équations dont les inconnues (et les constantes) sont des langages
    Le lemme permet de calculer à partir d'un AF une expression rationnelle
    Soit U et V deux lanages tel que Ɛ∉U,V
    Alors le seul langage X tel que X = UX+V est U*V

Exemple: Soit l'AF H = { A = { 0, 1 }, Q = { 1, 2, 3 }, I = { 1 }, F = { 1 }, 𝛿 = { (1, 0, 1), (1, 1, 2), (2, 1, 1), (2, 0, 3), (3, 1, 3), (3, 0, 2) } (VOIR ANNEXE [A COMPLETER])
         Utiliser le lemme d'Arden pour trouver le langage reconnu par cet automate
         Etat 0: X0 = 0X0 + 1X1 + Ɛ
         Etat 1: X1 = 0X2 + 1X0
         Etat 2: X2 = 0X1 + 1X2
         (2) => X2 = 1* 0X1
         (1) => X1 = 0 1* 0X1 + 1X0
         Arden => X1 = (0 1* 0)* 1X0
         (0) => X0 = 0X0 + 1 ((0 1* 0)* 1X0) + Ɛ
                X0 = (0 + 1 (0 1* 0)* 1)X0 + Ɛ
         Arden => X0 = (0 + 1 (0 1* 0)* 1)* Ɛ
                X0 = (0 + 1 (0 1* 0)* 1)*
         Le langage reconnu par l'AF est X0

Preuve du lemme d'Ardun
    X = UX+V <==> X = U*V
        <= UX+V = U(U*V) + V
                = (UU* + Ɛ) V
                = U*V = X
        => Pour montrer que X = U*V on doit montrer:
            U*V ⊆ X
                X = UX+V => V ⊆ X (a) et UX ⊆ X (b)
                On doit montrer que U*V ⊆ X c'est à dire Hn = U^nV ⊆ X ∀n≥0
                On montre cela par récurrence sur n
                H0: U^0V = ƐV = V ⊆ X (d'après a)
                Hn -> Hn+1: Soit U^nV ⊆ X alors U^(n+1)V ⊆ X
                    U^(n+1)V = U(U^nV)
                             ⊆ UX (d'après Hn)
                             ⊆ X  (d'après b)
                Vrai
            X ⊆ U*V
                On suppose qu'il existe x∈X tel que x∉U*V
                On choisit X de longueur minimale
                x∈X = UX+V
                -> Soit x∈V: alors x∈U*V => Contradiction
                -> Soit x∈UX:
                    x = ux', u∈U et x'∈X
                    Ɛ∉U => u≠Ɛ => |u|≥1 => |x'|<|x|
                    x'∈U*V => x = ux'∈UU*V = U*V => Contradiction
                Vrai par l'absurde

Exemple: Soit l'AF H = { A = { 0, 1 }, Q = { 1, 2 }, I = { 1 }, F = { 1 }, 𝛿 = { (1, 1, 1), (1, 0, 2), (2, 0, 1), (2, 1, 2) } (VOIR ANNEXE [A COMPLETER])
         Utiliser le lemme d'Arden pour trouver le langage reconnu par l'AF
         Etat 1: 0X2 + 1X1 + Ɛ
         Etat 2: 0X1 + 1X2
         (2) => X2 = 1* 0X1
         (1) => X1 = 1X1 + 0 1* 0X1
                X1 = (1 + 0 1* 0)X1
         Arden => X1 = (1 + 0 1* 0)*Ɛ
                X1 = (1 + 0 1* 0)*
         Le langage reconnu par l'AF est X1


RESIDUELS

Définition: On appelle un résiduel (ou quotient à gauche) d'un langage LcA* par rapport à un mot u∈A* le langage u^-1L = L/u = { v∈A* | uv∈L }
Bref c'est l’ensemble des mots de L qui commencent par u auxquels on a retiré ce préfixe u.